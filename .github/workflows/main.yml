name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Set a reasonable timeout (10 minutes here)

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: postgres

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r .github/workflows/requirements.txt
        
    # Install PostgreSQL development headers (libpq-dev)
    - name: Install dependencies for psycopg2
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev gcc
    - name: Load .env
      run: |
        if [ -f .env ]; then
          export $(cat .env | grep -v '#' | awk '/=/ {print $1}')
        fi


    # Build Docker images (if using Docker)
    - name: Build Docker image
      run: |
        docker compose  --env-file .env -f worknest/src/app/backend/compose.yaml up 



    # # Run Tests (if applicable)
    # - name: Run tests
    #   run: |
    #     # Run your unit tests or integration tests here
    #     docker exec -it <your_microservice_container_name> pytest

  # Stop and remove Docker containers after the job is done
    - name: Shut down Docker Compose services
      run: |
        docker-compose -f worknest/src/app/backend/compose.yaml down


  
