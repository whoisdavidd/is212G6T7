name: CI/CD Pipeline

on:
  push:
    branches:
      - SCRUMS-38-Integrating-EC2-containers  # Change trigger to the Scrum branch
  pull_request:
    branches:
      - SCRUMS-38-Integrating-EC2-containers  # Change trigger to the Scrum branch

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Set a reasonable timeout (10 minutes here)

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: postgres
        options: --memory=1g  # Limit memory to 1GB for the Postgres service

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3




    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
     # Run Jest tests after Python tests
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
       node-version: '20.14'
       
   

    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r .github/workflows/requirements.txt
       # Install Node.js dependencies
    - name: Install Node.js dependencies
      run: yarn install
 
     # Verify that Jest is installed
    - name: List installed Node.js packages
      run: yarn list --pattern jest
 
    # Run Jest tests
    - name: Run Jest tests
      run: |
        cd worknest
        yarn run test

    - name: Generate .env file
      run: |
          echo "SQLALCHEMY_DATABASE_URI='postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}localhost:5432/postgres'" > worknest/src/app/backend/.env
        
    # # Install PostgreSQL development headers (libpq-dev)
    # - name: Install dependencies for psycopg2
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y libpq-dev gcc
    # Install Node.js
    

    # Build Docker images (if using Docker)
    - name: Build Docker image
      run: |
        docker compose  --env-file worknest/src/app/backend/.env -f worknest/src/app/backend/compose.yaml up -d
         # Run tests in microservices
        docker exec backend-micro_profile-1  pytest
        docker exec backend-micro_event-1  pytest
        docker exec backend-micro_request-1  pytest
        docker exec backend-micro_schedule-1  pytest
  


   




  
